package TeamForge::PageApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/PageApp?wsdl [Mon Nov 15 16:37:46 2010]

=head1 NAME

TeamForge::PageApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item addPageImage()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      fileId                => soapenc:string
      filename              => soapenc:string
      mimetype              => soapenc:string


Returns attachment id of the added image

Since 5.3

=back



Adds an uploaded file as an image for a page.



----

=item createComponent()


=over

=item Arguments

      sessionId             => soapenc:string
      pageId                => soapenc:string
      compName              => soapenc:string
      componentType         => soapenc:string
      topOfPage             => xsd:boolean
      visibility            => xsd:int
      attributes            => tns1:SoapNamedValues
      content               => soapenc:string


Returns the newly created component

Since 5.0

=back



Creates a page component.



----

=item createPage()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      visible               => xsd:boolean


Returns the newly created page

Since 5.0

=back



Creates a new project page.



----

=item deletePage()


=over

=item Arguments

      sessionId             => soapenc:string
      pageId                => soapenc:string


Since 5.0

=back



Deletes an existing page



----

=item deletePageComponent()


=over

=item Arguments

      sessionId             => soapenc:string
      pageComponentId       => soapenc:string


Since 5.0

=back



Deletes an existing page component



----

=item deletePageImage()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      attachmentId          => soapenc:string


Since 5.3

=back



Deletes the specified attachment of the specified object.



----

=item getPageComponents()


=over

=item Arguments

      sessionId             => soapenc:string
      pageId                => soapenc:string


Returns array of page components

Since 5.0

=back



Get an array of page components for a page (in the correct order)



----

=item getPageData()


=over

=item Arguments

      sessionId             => soapenc:string
      pageId                => soapenc:string


Returns the page data

Since 5.0

=back



Gets a project page. This API only fetches the page data and does not
fetch the component contents.



----

=item getPageImageUrl()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      attachmentId          => soapenc:string


Returns the relative url for the image.

Since 5.3

=back



Gets relative url to access to the uploaded image from an html page. To
embed an uploaded image in an html page, specify the string returned by
this call as src in the img tag, no need to add protocol or server name
as prefix.



----

=item getPageList()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns list of pages for the user in the project

Since 5.0

=back



Get all pages for a user in the specified project (in the correct
order).



----

=item getTextComponentContent()


=over

=item Arguments

      sessionId             => soapenc:string
      pageCompId            => soapenc:string


Returns content of the text component as string

Since 5.0

=back



Gets the content of a Text component. The API fetches the HTML source
of a text component. Note that only Text components are supported by
this API.



----

=item listPageImages()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Since 5.3

=back



Lists the images for a project.



----

=item movePage()


=over

=item Arguments

      sessionId             => soapenc:string
      pageFolderPath        => soapenc:string
      destPath              => soapenc:string


Since 5.0

=back



Move a page (including sub pages and contents).



----

=item setComponentDisplayOrder()


=over

=item Arguments

      sessionId             => soapenc:string
      pageId                => soapenc:string
      componentIds          => impl:ArrayOf_xsd_string


Since 5.0

=back



Set the display order for components within a page



----

=item setPageComponentData()


=over

=item Arguments

      sessionId             => soapenc:string
      pageComponent         => tns1:PageComponentSoapDO


Since 5.0

=back



Updates a page component



----

=item setPageData()


=over

=item Arguments

      sessionId             => soapenc:string
      pageData              => tns1:PageSoapDO


Since 5.0

=back



Edit an existing page. This API will not modify the component data.



----

=item setPageDisplayOrder()


=over

=item Arguments

      sessionId             => soapenc:string
      folderId              => soapenc:string
      childrenPageIds       => impl:ArrayOf_xsd_string


Returns true is the update went perfectly. false is the update succeeded, but had to deal with

Since 5.0

=back



Set the page display order. This API will not modify the component
data.



----

=item setTextComponentContent()


=over

=item Arguments

      sessionId             => soapenc:string
      pageCompId            => soapenc:string
      content               => soapenc:string


Since 5.0

=back



Sets the content of a Text component. The API replaces the existing
HTML source of the text component with the new content. Note that only
Text components are supported by this API.



----

=back

=cut

my %methods = (
  deletePageImage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentId', type => 'soapenc:string', attr => {}),
    ],
  },
  setTextComponentContent => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageCompId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'content', type => 'soapenc:string', attr => {}),
    ],
  },
  createPage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'visible', type => 'xsd:boolean', attr => {}),
    ],
  },
  movePage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageFolderPath', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'destPath', type => 'soapenc:string', attr => {}),
    ],
  },
  createComponent => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'compName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'componentType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'topOfPage', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'visibility', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'attributes', type => 'tns1:SoapNamedValues', attr => {}),
      SOAP::Data->new(name => 'content', type => 'soapenc:string', attr => {}),
    ],
  },
  setPageData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageData', type => 'tns1:PageSoapDO', attr => {}),
    ],
  },
  getPageList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  setComponentDisplayOrder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'componentIds', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  getPageData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageId', type => 'soapenc:string', attr => {}),
    ],
  },
  getPageImageUrl => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentId', type => 'soapenc:string', attr => {}),
    ],
  },
  deletePageComponent => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageComponentId', type => 'soapenc:string', attr => {}),
    ],
  },
  getTextComponentContent => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageCompId', type => 'soapenc:string', attr => {}),
    ],
  },
  setPageComponentData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageComponent', type => 'tns1:PageComponentSoapDO', attr => {}),
    ],
  },
  addPageImage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fileId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filename', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'mimetype', type => 'soapenc:string', attr => {}),
    ],
  },
  deletePage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageId', type => 'soapenc:string', attr => {}),
    ],
  },
  setPageDisplayOrder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'childrenPageIds', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  getPageComponents => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pageId', type => 'soapenc:string', attr => {}),
    ],
  },
  listPageImages => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PageApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
