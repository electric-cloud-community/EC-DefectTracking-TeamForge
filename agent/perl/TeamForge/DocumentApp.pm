package TeamForge::DocumentApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/DocumentApp?wsdl [Mon Nov 15 16:37:42 2010]

=head1 NAME

TeamForge::DocumentApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item createDocument()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      versionComment        => soapenc:string
      status                => soapenc:string
      createLocked          => xsd:boolean
      fileName              => soapenc:string
      mimeType              => soapenc:string
      fileId                => soapenc:string
      associationId         => soapenc:string
      associationDesc       => soapenc:string


Returns Document data object.

Since 4.4-SP1

=back



Creates a new document with the specified tile, description, etc. If
the site is configured to have an association mandatory on document
create, then associationId must be specified.



----

=item createDocumentFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string


Returns Document Folder data object.

Since 4.2

=back



Creates a new document folder with the specified title, description,
etc.



----

=item createDocumentWithUrl()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      versionComment        => soapenc:string
      status                => soapenc:string
      createLocked          => xsd:boolean
      fileUrl               => soapenc:string
      associationId         => soapenc:string
      associationDesc       => soapenc:string


Returns Document data object.

Since 4.4SP1

=back



Creates a new document with the specified tile, description, etc. for a
URL with an association. If the site is configured to have an
association mandatory on document create, then associationId must be
specified.



----

=item createReview()


=over

=item Arguments

      sessionId             => soapenc:string
      documentId            => soapenc:string
      version               => xsd:int
      title                 => soapenc:string
      description           => soapenc:string
      dueDate               => xsd:dateTime
      requiredReviewers     => impl:ArrayOf_xsd_string
      optionalReviewers     => impl:ArrayOf_xsd_string
      attachDocument        => xsd:boolean


Returns The data object of the review

=back



Create a document review cycle



----

=item deleteDocument()


=over

=item Arguments

      sessionId             => soapenc:string
      documentId            => soapenc:string


Since 4.1

=back



Deletes a document.



----

=item deleteDocumentFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      folderId              => soapenc:string


Since 4.2

=back



Deletes a document folder with the specified id.



----

=item findDocuments()


=over

=item Arguments

      sessionId             => soapenc:string
      queryString           => soapenc:string
      projectId             => soapenc:string
      searchAttachments     => xsd:boolean
      currentVersionsOnly   => xsd:boolean


Returns List of documents matching search criteria.

Since 4.1

=back



Finds a list of documents matching a search string.



----

=item getAssignedDocumentReviewList()


=over

=item Arguments

      sessionId             => soapenc:string
      username              => soapenc:string


Returns Document review list.

Since 4.2

=back



Lists all document reviews assigned to a user for review.



----

=item getDocumentData()


=over

=item Arguments

      sessionId             => soapenc:string
      documentId            => soapenc:string
      documentVersion       => xsd:int


Returns Document data object.

Since 4.1

=back



Get specified document data.

B<Change History>

I<Version 4.4>

=over

=item * DocumentSoapDO.getMimeType() will return null for a document
that uses external url, while DocumentSoapDO.getFileUrl() will allow
direct access of file url without making a separate call.

=back



----

=item getDocumentFileId()


=over

=item Arguments

      sessionId             => soapenc:string
      documentId            => soapenc:string
      documentVersion       => xsd:int


Returns File storage id (for download using FileStorageService or SimpleFileStorageService).

Since 4.1

=back



Returns a the file id associated with the document file. The returned
file id should be used with one of the file storage services to
download the file (e.g. FileStorageApp or SimpleFileStorageApp
service).

I<IMPORTANTI<: The returned file id is valid ONLY during the session.
>>



----

=item getDocumentFolderData()


=over

=item Arguments

      sessionId             => soapenc:string
      folderId              => soapenc:string


Returns Document Folder data object.

Since 4.2

=back



Gets detailed data on a document folder



----

=item getDocumentFolderList()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      recursive             => xsd:boolean


Returns Document folder list.

Since 4.1

=back



Provides SOAP web service for document manager application.

B<Change History>

I<Version 4.4>

=over

=item * I<setDocumentDataWithUrl>: Removed in 4.4. Use
DocumentSoapDO.setFileUrl and setDocumentData instead.

=item * I<getDocumentFileUrl>: Removed in 4.4. Use getDocumentData and
call DocumentSoapDO.getFileUrl instead.

=back

List document folders.



----

=item getDocumentList()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter


Returns Document list.

Since 4.1

=back



Lists all documents within a document folder.

B<Change History>

I<Version 4.2>

=over

=item * Added additional parameter C<filters> for future use. Must be
null or empty for now.

=back



----

=item getDocumentReviewList()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter


Returns Document review list.

Since 4.2

=back



Lists all document reviews within a project or a document. The
following are the only permitted combinations:

=over

=item * containerId=null, filters=(createdBy="username" AND
status="open"}: Returns all open reviews created by the user.

=item * containerId=documentId, filters=null: Returns a list of reviews
(open and closed) for the document.

=back



----

=item moveDocument()


=over

=item Arguments

      sessionId             => soapenc:string
      documentId            => soapenc:string
      targetFolderId        => soapenc:string


Returns New document object.

Since 4.2

=back



Moves a document to a specified target folder.



----

=item moveDocumentFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      folderId              => soapenc:string
      destFolderId          => soapenc:string


Returns new document folder

Since 4.2

=back



Moves document folder



----

=item setDocumentData()


=over

=item Arguments

      sessionId             => soapenc:string
      documentData          => tns1:DocumentSoapDO
      fileId                => soapenc:string




=back



Sets specified document data.



----

=item setDocumentDataWithAssociation()


=over

=item Arguments

      sessionId             => soapenc:string
      documentData          => tns1:DocumentSoapDO
      fileId                => soapenc:string
      associationId         => soapenc:string
      associationComment    => soapenc:string


Since 4.4-SP1

=back



Sets specified document data with Association.



----

=item setDocumentFolderData()


=over

=item Arguments

      sessionId             => soapenc:string
      documentFolderData    => tns1:DocumentFolderSoapDO


Since 4.2

=back



Sets detailed data on a document folder



----

=back

=cut

my %methods = (
  createReview => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'version', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'dueDate', type => 'xsd:dateTime', attr => {}),
      SOAP::Data->new(name => 'requiredReviewers', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'optionalReviewers', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'attachDocument', type => 'xsd:boolean', attr => {}),
    ],
  },
  getDocumentFolderData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
    ],
  },
  createDocumentFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
    ],
  },
  setDocumentFolderData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentFolderData', type => 'tns1:DocumentFolderSoapDO', attr => {}),
    ],
  },
  moveDocument => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  findDocuments => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'searchAttachments', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'currentVersionsOnly', type => 'xsd:boolean', attr => {}),
    ],
  },
  getDocumentFolderList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  createDocumentWithUrl => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'versionComment', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'createLocked', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'fileUrl', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationDesc', type => 'soapenc:string', attr => {}),
    ],
  },
  getAssignedDocumentReviewList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'soapenc:string', attr => {}),
    ],
  },
  setDocumentData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentData', type => 'tns1:DocumentSoapDO', attr => {}),
      SOAP::Data->new(name => 'fileId', type => 'soapenc:string', attr => {}),
    ],
  },
  setDocumentDataWithAssociation => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentData', type => 'tns1:DocumentSoapDO', attr => {}),
      SOAP::Data->new(name => 'fileId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationComment', type => 'soapenc:string', attr => {}),
    ],
  },
  deleteDocumentFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
    ],
  },
  createDocument => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'versionComment', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'createLocked', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'fileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'mimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fileId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'associationDesc', type => 'soapenc:string', attr => {}),
    ],
  },
  getDocumentData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentVersion', type => 'xsd:int', attr => {}),
    ],
  },
  getDocumentFileId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentVersion', type => 'xsd:int', attr => {}),
    ],
  },
  getDocumentReviewList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
    ],
  },
  moveDocumentFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'destFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  getDocumentList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
    ],
  },
  deleteDocument => {
    endpoint => 'http://localhost:8080/ce-soap50/services/DocumentApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'documentId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
