package TeamForge::PluggableApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/PluggableApp?wsdl [Mon Nov 15 16:37:48 2010]

=head1 NAME

TeamForge::PluggableApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item createIntegratedApplication()


=over

=item Arguments

      sessionId             => soapenc:string
      xmlFile               => apachesoap:DataHandler
      iconFileId            => soapenc:string


Returns PluggableComponentSoapDO with the details of the integrated

=back



Create/Import an integrated application.



----

=item editIntegratedApplication()


=over

=item Arguments

      sessionId             => soapenc:string
      soapDO                => tns1:PluggableComponentSoapDO




=back



Edits the Integrated Application for the giving
PluggableComponentSoapDO



----

=item editProjectConfigurationParameters()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      paramDO               => impl:ArrayOf_tns1_PluggableComponentParameterSoapDO


Returns name/value pair of validation errors if any, where name is the

Since 5.0

=back



Edit project specific configuration parameters of a pluggable
application. Use getProjectConfigParameterData to get the existing
configuration parameters for a pluggable application.



----

=item enablePluggableComponent()


=over

=item Arguments

      sessionId             => soapenc:string
      projectID             => soapenc:string
      pluggableID           => soapenc:string
      params                => impl:ArrayOf_tns1_PluggableComponentParameterSoapDO
      prefix                => soapenc:string


Returns name/value pair of validation errors if any, where name is the

Since 5.0

=back



Add a pluggable application to a project



----

=item getBaseUrlByLinkId()


=over

=item Arguments

      sessionId             => soapenc:string
      linkId                => soapenc:string


Returns the project integrated applications base URL

Since 5.0

=back





----

=item getIntegratedAppPrefixes()


=over

=item Arguments

      sessionId             => soapenc:string


Returns Array List of Integrated App Prefixes.

=back



Gets the list of Integrated App Prefixes.



----

=item getIntegratedApplicationByName()


=over

=item Arguments

      sessionId             => soapenc:string
      plugName              => soapenc:string


Returns PluggableComponentSoapDO object

=back



Returns the PluggableComponentSoapDO object for the given Integrated
Application Name



----

=item getLinkPlugId()


=over

=item Arguments

      sessionId             => soapenc:string
      projectPath           => soapenc:string
      baseUrl               => soapenc:string


Returns integrated application id for the specified project and base URL

Since 5.0

=back



Get the integrated application id for the specified project and base
URL.



----

=item getLinkPlugIdByPlugId()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      plugId                => soapenc:string


Returns integrated application link id for the specified project and

Since 5.4

=back



Get the integrated application id for the specified project and base
URL.



----

=item getPlugIdByBaseUrl()


=over

=item Arguments

      sessionId             => soapenc:string
      baseUrl               => soapenc:string


Returns integrated application id

Since 5.0

=back



Get integrated application id for the given base URL



----

=item getProjectConfigParameterData()


=over

=item Arguments

      sessionId             => soapenc:string
      linkId                => soapenc:string


Returns array of project specific configuration parameters

Since 5.0

=back



Get project specific configuration parameters for a pluggable
application.



----

=item getProjectPathByIntegratedAppId()


=over

=item Arguments

      sessionId             => soapenc:string
      intAppId              => soapenc:string


Returns project path for the given integrated application.

Since 5.0

=back



Get the project path for the given integrated application id.



----

=item getProjectPrefix()


=over

=item Arguments

      sessionId             => soapenc:string
      linkId                => soapenc:string


Returns project prefix for an integrated application.

Since 5.4

=back



Get the project prefix for an integrated application.



----

=item listPluggableComponents()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns pcList PluggableComponentList.

Since 5.0

=back



List Pluggable Components. Gives the list of pluggable components
available.



----

=item removeProjectIntegratedApplication()


=over

=item Arguments

      sessionId             => soapenc:string
      linkPlugCompId        => soapenc:string


Since 5.0

=back



Remove integrated application from a project.



----

=item setPluggableAppMessageResource()


=over

=item Arguments

      sessionId             => soapenc:string
      plugId                => soapenc:string
      locale                => soapenc:string
      key                   => soapenc:string
      value                 => soapenc:string




=back



Creates / Updates the Pluggable App Message resource



----

=item updateRecentAccess()


=over

=item Arguments

      userId                => soapenc:string
      objectId              => soapenc:string


Since 5.4

=back



Updates the recent access entries for the user.



----

=back

=cut

my %methods = (
  getLinkPlugId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectPath', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'baseUrl', type => 'soapenc:string', attr => {}),
    ],
  },
  setPluggableAppMessageResource => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'plugId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'locale', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'key', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'value', type => 'soapenc:string', attr => {}),
    ],
  },
  editProjectConfigurationParameters => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'paramDO', type => 'impl:ArrayOf_tns1_PluggableComponentParameterSoapDO', attr => {}),
    ],
  },
  editIntegratedApplication => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'soapDO', type => 'tns1:PluggableComponentSoapDO', attr => {}),
    ],
  },
  getIntegratedAppPrefixes => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
    ],
  },
  getPlugIdByBaseUrl => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'baseUrl', type => 'soapenc:string', attr => {}),
    ],
  },
  getProjectConfigParameterData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'linkId', type => 'soapenc:string', attr => {}),
    ],
  },
  removeProjectIntegratedApplication => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'linkPlugCompId', type => 'soapenc:string', attr => {}),
    ],
  },
  enablePluggableComponent => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectID', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'pluggableID', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'params', type => 'impl:ArrayOf_tns1_PluggableComponentParameterSoapDO', attr => {}),
      SOAP::Data->new(name => 'prefix', type => 'soapenc:string', attr => {}),
    ],
  },
  listPluggableComponents => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  createIntegratedApplication => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'xmlFile', type => 'apachesoap:DataHandler', attr => {}),
      SOAP::Data->new(name => 'iconFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  getProjectPrefix => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'linkId', type => 'soapenc:string', attr => {}),
    ],
  },
  getBaseUrlByLinkId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'linkId', type => 'soapenc:string', attr => {}),
    ],
  },
  getProjectPathByIntegratedAppId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'intAppId', type => 'soapenc:string', attr => {}),
    ],
  },
  getLinkPlugIdByPlugId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'plugId', type => 'soapenc:string', attr => {}),
    ],
  },
  getIntegratedApplicationByName => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'plugName', type => 'soapenc:string', attr => {}),
    ],
  },
  updateRecentAccess => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PluggableApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'userId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
