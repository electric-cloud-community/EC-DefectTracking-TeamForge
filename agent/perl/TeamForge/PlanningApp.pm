package TeamForge::PlanningApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/PlanningApp?wsdl [Mon Nov 15 16:37:47 2010]

=head1 NAME

TeamForge::PlanningApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item createPlanningFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      startDate             => xsd:dateTime
      endDate               => xsd:dateTime


Returns the planning folder soap object

Since 5.3

=back



Creates a new planning folder



----

=item createPlanningFolder2()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      startDate             => xsd:dateTime
      endDate               => xsd:dateTime
      status                => soapenc:string
      capacity              => xsd:int
      releaseId             => soapenc:string


Returns the planning folder soap object

Since 5.4

=back



Creates a new planning folder



----

=item deletePlanningFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string


Since 5.3

=back



Deletes a planning folder with the specified id. All sub planning
folders will be deleted as well. Tracker items in planning folder or
sub planning folders will move up to the parent of the deleted planning
folder or will lose their planning folder association at all if the
deleted planning folder was a top-level folder.



----

=item getArtifactListInPlanningFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter
      recursive             => xsd:boolean


Returns List of artifacts contained in the planning folder/its

Since 5.3

=back



Returns the list of artifacts contained in a planning folder or its
descendents.



----

=item getArtifactListInPlanningFolder2()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter
      recursive             => xsd:boolean


Returns List of artifacts contained in the planning folder/its

Since 5.4

=back



Returns the list of artifacts contained in a planning folder or its
descendents. The difference between this call and
getArtifactListInPlanningFolder is that the new list adds the story
points, the status and the release.



----

=item getPlanningFolder2Data()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string


Returns Detailed data on the PlanningFolder.

Since 5.4

=back



Returns a data object for a given planning folder



----

=item getPlanningFolder2List()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      recursive             => xsd:boolean


Returns List of filtered planning folder

Since 5.4

=back



Returns the list of planning folders within the specified project.
Planning folders having the same parent are correctly ordered.



----

=item getPlanningFolderData()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string


Returns Detailed data on the PlanningFolder.

Since 5.3

=back



Returns a data object for a given planning folder



----

=item getPlanningFolderList()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      recursive             => xsd:boolean


Returns List of filtered planning folder

Since 5.3

=back



Returns the list of planning folders within the specified project.
Planning folders having the same parent are correctly ordered.



----

=item getPlanningFolderSummary()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string


Returns Statistics for the artifacts in the PlanningFolder.

Since 5.3

=back



Returns the statistics for the artifacts in a given planning folder and
all its sub planning folders



----

=item getPlanningFolderSummary2()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string


Returns Statistics for the artifacts in the PlanningFolder.

Since 5.4

=back



Returns the statistics for the artifacts in a given planning folder and
all its sub planning folders



----

=item getPlanningFolderSummary2List()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      recursive             => xsd:boolean


Returns List of filtered planning folder

Since 5.4

=back



Returns the list of planning folders within the specified project
including their statistics Planning folders having the same parent are
correctly ordered.



----

=item getPlanningFolderSummaryList()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      recursive             => xsd:boolean


Returns List of filtered planning folder

Since 5.3

=back



Returns the list of planning folders within the specified project
including their statistics Planning folders having the same parent are
correctly ordered.



----

=item getPlanningStatusValues()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Since 5.4

=back



Gets status values for the planning application of a specific project.



----

=item getRankedArtifactList()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string




=back


----

=item movePlanningFolder()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string
      destParentId          => soapenc:string


Returns new planning folder object

Since 5.3

=back



Move a Planning Folder including its sub folders and contents. Fails if
not everything can be moved.



----

=item movePlanningFolder2()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string
      destParentId          => soapenc:string


Returns new planning folder object

Since 5.4

=back



Move a Planning Folder including its sub folders and contents. Fails if
not everything can be moved.



----

=item reorderPlanningFolders()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      planningFolderIds     => impl:ArrayOf_xsd_string


Since 5.3

=back



Sets a new order for the planning folders in their parent folder. The
planning folders will be listed in this new order in UI.



----

=item setPlanningFolder2Data()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderData    => tns1:PlanningFolder2SoapDO


Since 5.4

=back



Sets data on a specific planning folder.



----

=item setPlanningFolderData()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderData    => tns1:PlanningFolderSoapDO


Since 5.3

=back



Sets data on a specific planning folder.



----

=item setPlanningStatusValues()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      statusValues          => impl:ArrayOf_tns1_PlanningStatusValueSoapDO


Since 5.4

=back



Sets status values that is associated with the planning application of
a specific project.



----

=back

=cut

my %methods = (
  reorderPlanningFolders => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderIds', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  movePlanningFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'destParentId', type => 'soapenc:string', attr => {}),
    ],
  },
  getRankedArtifactList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  createPlanningFolder2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'startDate', type => 'xsd:dateTime', attr => {}),
      SOAP::Data->new(name => 'endDate', type => 'xsd:dateTime', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'capacity', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'soapenc:string', attr => {}),
    ],
  },
  getPlanningFolderSummary2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  createPlanningFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'startDate', type => 'xsd:dateTime', attr => {}),
      SOAP::Data->new(name => 'endDate', type => 'xsd:dateTime', attr => {}),
    ],
  },
  getPlanningStatusValues => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  deletePlanningFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  getPlanningFolder2List => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  getPlanningFolderData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  movePlanningFolder2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'destParentId', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactListInPlanningFolder => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  setPlanningStatusValues => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'statusValues', type => 'impl:ArrayOf_tns1_PlanningStatusValueSoapDO', attr => {}),
    ],
  },
  getArtifactListInPlanningFolder2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  getPlanningFolderSummaryList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  setPlanningFolderData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderData', type => 'tns1:PlanningFolderSoapDO', attr => {}),
    ],
  },
  getPlanningFolder2Data => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
  setPlanningFolder2Data => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderData', type => 'tns1:PlanningFolder2SoapDO', attr => {}),
    ],
  },
  getPlanningFolderList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  getPlanningFolderSummary2List => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  getPlanningFolderSummary => {
    endpoint => 'http://localhost:8080/ce-soap50/services/PlanningApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
