package TeamForge::TrackerApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/TrackerApp?wsdl [Mon Nov 15 16:37:54 2010]

=head1 NAME

TeamForge::TrackerApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item addDateField()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      fieldName             => soapenc:string
      isRequired            => xsd:boolean
      isDisabled            => xsd:boolean
      isHiddenOnCreate      => xsd:boolean


Since 4.3-SP1

=back



Adds a custom Date field to a tracker.



----

=item addMultiSelectField()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      fieldName             => soapenc:string
      displayLines          => xsd:int
      isRequired            => xsd:boolean
      isDisabled            => xsd:boolean
      isHiddenOnCreate      => xsd:boolean
      fieldValues           => impl:ArrayOf_xsd_string
      defaultValues         => impl:ArrayOf_xsd_string




=back


----

=item addSingleSelectField()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      fieldName             => soapenc:string
      isRequired            => xsd:boolean
      isDisabled            => xsd:boolean
      isHiddenOnCreate      => xsd:boolean
      fieldValues           => impl:ArrayOf_xsd_string
      defaultValue          => soapenc:string




=back


----

=item addTextField()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      fieldName             => soapenc:string
      displayColumns        => xsd:int
      displayLines          => xsd:int
      isRequired            => xsd:boolean
      isDisabled            => xsd:boolean
      isHiddenOnCreate      => xsd:boolean
      defaultValue          => soapenc:string




=back


----

=item addUserSelectField()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      fieldName             => soapenc:string
      displayLines          => xsd:int
      isRequired            => xsd:boolean
      isDisabled            => xsd:boolean
      isHiddenOnCreate      => xsd:boolean
      defaultValues         => impl:ArrayOf_xsd_string
      userFilter            => soapenc:string


Since 4.3-SP1

=back



Adds a custom User selection field to a tracker.



----

=item copyWorkflowTransitions()


=over

=item Arguments

      sessionId             => soapenc:string
      srcTrackerId          => soapenc:string
      dstTrackerId          => soapenc:string


Since 4.3-SP1-HOTFIX3

=back



Copy workflow transitions between two trackers. In order for this
operation to succeed, the following conditions must be met: - caller
needs to have tracker admin permission for both srTracker and
destTracker - every transition req role in srcTracker must have
corresponding role with the same name in dstTracker - every transition
req field in srcTracker must have corresponding field with the same
name in dstTracker or be a custom field name.



----

=item copyWorkflowTransitions2()


=over

=item Arguments

      sessionId             => soapenc:string
      srcTrackerId          => soapenc:string
      dstTrackerId          => soapenc:string


Since 5.3

=back



Copy workflow transitions between two trackers. (Just like
C<copyWorkflowTransitions> but reports effort errors insteads of hours
errors). In order for this operation to succeed, the following
conditions must be met: - caller needs to have tracker admin permission
for both srTracker and destTracker - every transition req role in
srcTracker must have corresponding role with the same name in
dstTracker - every transition req field in srcTracker must have
corresponding field with the same name in dstTracker or be a custom
field name.



----

=item createArtifact()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      group                 => soapenc:string
      category              => soapenc:string
      status                => soapenc:string
      customer              => soapenc:string
      priority              => xsd:int
      estimatedHours        => xsd:int
      assignedUsername      => soapenc:string
      releaseId             => soapenc:string
      flexFields            => tns1:SoapFieldValues
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Returns Newly created artifact object.

Since 4.1

=back



Creates a new artifact.

B<Change History>

I<Version 4.2>

=over

=item * Added additional paramters for an attachment.

=back



----

=item createArtifact2()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      group                 => soapenc:string
      category              => soapenc:string
      status                => soapenc:string
      customer              => soapenc:string
      priority              => xsd:int
      estimatedEffort       => xsd:int
      remainingEffort       => xsd:int
      autosumming           => xsd:boolean
      assignedUsername      => soapenc:string
      releaseId             => soapenc:string
      planningFolderId      => soapenc:string
      flexFields            => tns1:SoapFieldValues
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Returns Newly created artifact object.

Since 5.3

=back



Creates a new artifact but unlike C<createArtifact>, this method lets
you set the remaining effort, planning folder and autosumming flag at
creation time and returns a C<Artifact2SoapDO>.



----

=item createArtifact3()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string
      group                 => soapenc:string
      category              => soapenc:string
      status                => soapenc:string
      customer              => soapenc:string
      priority              => xsd:int
      estimatedEffort       => xsd:int
      remainingEffort       => xsd:int
      autosumming           => xsd:boolean
      points                => xsd:int
      assignedUsername      => soapenc:string
      releaseId             => soapenc:string
      planningFolderId      => soapenc:string
      flexFields            => tns1:SoapFieldValues
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Returns Newly created artifact object.

Since 5.4

=back



Creates a new artifact but unlike C<createArtifact2>, this method lets
you set the story points field and returns a C<Artifact3SoapDO>.



----

=item createArtifactDependency()


=over

=item Arguments

      sessionId             => soapenc:string
      originId              => soapenc:string
      targetId              => soapenc:string
      desc                  => soapenc:string


Since 4.4

=back



Create an artifact dependency between two artifacts. If an existing
artifact dependency already exists, the descriptions are simply
overriden.



----

=item createTracker()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      trackerName           => soapenc:string
      trackerTitle          => soapenc:string
      trackerDescription    => soapenc:string


Returns the tracker soap object

Since 4.3-HOTFIX1

=back



Creates a new tracker



----

=item createTracker2()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      trackerName           => soapenc:string
      trackerTitle          => soapenc:string
      trackerDescription    => soapenc:string
      icon                  => soapenc:string


Returns the tracker soap object

Since 5.3

=back



Creates a new tracker with an icon



----

=item deleteArtifact()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Since 4.1

=back



Deletes an artifact.



----

=item deleteField()


=over

=item Arguments

      sessionId             => soapenc:string
      objectId              => soapenc:string
      fieldId               => soapenc:string




=back


----

=item findArtifacts()


=over

=item Arguments

      sessionId             => soapenc:string
      queryString           => soapenc:string
      projectId             => soapenc:string
      searchAttachments     => xsd:boolean


Returns List of artifacts matching search criteria.

Since 4.1

=back



Finds a list of artifacts matching a search string.



----

=item findArtifacts2()


=over

=item Arguments

      sessionId             => soapenc:string
      queryString           => soapenc:string
      projectId             => soapenc:string
      searchAttachments     => xsd:boolean


Returns List of artifacts matching search criteria.

Since 5.3

=back



Finds a list of artifacts matching a search string but unlike
C<findArtifacts>, this method returns an C<Artifact2SoapList>.



----

=item findArtifacts3()


=over

=item Arguments

      sessionId             => soapenc:string
      queryString           => soapenc:string
      projectId             => soapenc:string
      searchAttachments     => xsd:boolean


Returns List of artifacts matching search criteria.

Since 5.4

=back



Finds a list of artifacts matching a search string but unlike
C<findArtifacts>, this method returns an C<Artifact3SoapList>.



----

=item getAllowedWorkflowTransitionList()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string


Returns Workflow definitions list. For requiredFields property of workflow definition, following special

Since 4.3

=back



Get workflow transitions for the tracker.

B<Change History>

I<Version 4.4 SP 1>

=over

=item * Added the missing [new artifact] transitions to the list

=item * The returning list now will contain [new artifact] transition
list with the following format [from value] [to value] null open null
close null pending

=back



----

=item getArtifactData()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns the data associated with the artifact at the given path

Since 4.1

=back



Returns data associated with the specified artifact. Unlike the
corresponding method in earlier versions of the soap interface (soap44,
etc.), this method now returns data for all flex fields, whether they
have values or not. Flex fields with no values will have NULL values in
the values[] array



----

=item getArtifactData2()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns the data associated with the artifact at the given path

Since 5.3

=back



Returns data associated with the specified artifact but unlike
C<getArtifactData>, this method returns an C<Artifact2SoapDO>.



----

=item getArtifactData3()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns the data associated with the artifact at the given path

Since 5.4

=back



Returns data associated with the specified artifact but unlike
C<getArtifact2Data>, this method returns an C<Artifact3SoapDO>.



----

=item getArtifactDetailList()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      selectedColumns       => impl:ArrayOf_xsd_string
      filters               => impl:ArrayOf_tns1_SoapFilter
      sortKeys              => impl:ArrayOf_tns1_SoapSortKey
      startIndex            => xsd:int
      maxRows               => xsd:int
      exceptionIfExpiredCache  => xsd:boolean
      forceNewQuery         => xsd:boolean


Returns List of filtered artifacts.

Since 4.3-HOTFIX1 Heavily modified in 4.4 to add paging, sorting and column selection.

=back



Returns a filtered and ordered list of artifacts from the specified
tracker. It gives the user the ability to ask only for certain results
with the parameters startIndex and maxRows. In this way the method can
be used to implement paging. A special value of -1 for the maxRows
parameter will be interpreted as asking for the complete list, ignoring
the value in startIndex. Unlike the corresponding method in earlier
versions of the soap interface (soap44, etc.), this method now returns
data for all flex fields, whether they have values or not. Flex fields
with no values will have NULL values in the values[] array

This method makes use of server-side caching of the complete list in
order to more efficiently return results for requests for subsequent
"pages" of data. In normal usage, requesting a subsequent page of a
given list will return data from this cache unless the cache has
expired, in which case the query will transparently be re-executed
before return the results. Note that this transparent re-execution can
result in slight inconsistencies in the data, if the underlying data
has changed. The exceptionIfExpiredCache and forceNewQuery flags can be
used to tune cache behavior.

Caching is managed transparently by the application server, using the
filters and selectedColumns parameters to identify subsequent requests
for subsets of the same data set. The cache is associated with the user
session. Note that the implementation may choose not to cache results
if the entire list is being fetched (via specifying -1 for maxRows).

See ArtifactSoapDO for column and filter names constant values:
ArtifactSoapDO.COLUMN_TITLE, ArtifactSoapDO.COLUMN_ASSIGNED_TO,
FILTER_PRIORITY, FILTER, FILTER_CATEGORY, etc.



----

=item getArtifactDetailList2()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      selectedColumns       => impl:ArrayOf_xsd_string
      filters               => impl:ArrayOf_tns1_SoapFilter
      sortKeys              => impl:ArrayOf_tns1_SoapSortKey
      startIndex            => xsd:int
      maxRows               => xsd:int
      exceptionIfExpiredCache  => xsd:boolean
      forceNewQuery         => xsd:boolean


Returns List of filtered artifacts.

Since 5.3

=back



Just like C<getArtifactDetailList> but it returns an
C<ArtifactDetail2SoapList>.



----

=item getArtifactDetailList3()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string
      selectedColumns       => impl:ArrayOf_xsd_string
      filters               => impl:ArrayOf_tns1_SoapFilter
      sortKeys              => impl:ArrayOf_tns1_SoapSortKey
      startIndex            => xsd:int
      maxRows               => xsd:int
      exceptionIfExpiredCache  => xsd:boolean
      forceNewQuery         => xsd:boolean


Returns List of filtered artifacts.

Since 5.4

=back



Just like C<getArtifactDetailList2> but it returns an
C<ArtifactDetail3SoapList>.



----

=item getArtifactList()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter


Returns List of filtered artifacts.

Since 4.1

=back



Returns a filtered list of artifacts within the specified container
(project or tracker). See ArtifactSoapDO for filter constant values:
ArtifactSoapDO.FILTER_ASSIGNED_TO, etc.

B<Change History>

I<Version 4.2>

=over

=item * Added additional parameter (C<filters>) for filtering artifact
lists.

=back

I<Version 4.4>

=over

=item * Added a limit to the number of rows that could be retreived.
This limit is by default 5000 but is configurable

=item * it is substantially obselete by enhancements to
getArtifactDetailList(), which now includes the ability to select which
columns are returned, as well as the ability to fetch subsets of data
on a "paged" basis, and to return sorted results.

=back



----

=item getArtifactList2()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter


Returns List of filtered artifacts.

Since 5.3

=back



Returns a filtered list of artifacts within the specified container
(project or tracker). Just like C<getArtifactList> but returns a list
of C<Artifact2SoapDO> objects.



----

=item getArtifactList3()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter


Returns List of filtered artifacts.

Since 5.4

=back



Returns a filtered list of artifacts within the specified container
(project or tracker). Just like C<getArtifactList2> but returns a list
of C<Artifact3SoapRow> objects.



----

=item getChildDependency2List()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns dependency list

Since 5.3

=back



Get the dependency list for an artifact where the artifact is the
origin artifact. Like C<getChildDependencyList> but returns the tracker
icon of the children artifact as well.



----

=item getChildDependencyList()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns dependency list

Since 4.4

=back



Get the dependency list for an artifact where the artifact is the
origin artifact.



----

=item getCrossTrackerArtifactList()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter
      selectedColumns       => impl:ArrayOf_xsd_string


Returns List of filtered artifacts.

Since 5.3

=back



Returns a filtered list of artifacts within the specified container
(project or tracker). Just like C<getArtifactList> but returns a list
of C<ArtifactDetail2SoapDO> objects that includes tracker specific
information. Since this is a cross tracker query, flex fields may not
be populated.



----

=item getCrossTrackerArtifactList2()


=over

=item Arguments

      sessionId             => soapenc:string
      containerId           => soapenc:string
      filters               => impl:ArrayOf_tns1_SoapFilter
      selectedColumns       => impl:ArrayOf_xsd_string


Returns List of filtered artifacts.

Since 5.4

=back



Returns a filtered list of artifacts within the specified container
(project or tracker). Just like C<getCrossTrackerArtifactList> but
returns a list of C<ArtifactDetail3SoapDO> objects that includes the
points information. Since this is a cross tracker query, flex fields
may not be populated.



----

=item getFields()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string


Returns Array of all field values.

Since 4.3-HOTFIX1

=back



Returns the custom/flex-fields associated with a specific tracker.



----

=item getFields2()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string


Returns Array of all field values.

Since 5.3

=back



Returns the custom/flex-fields associated with a specific tracker. This
method has been introduced to also return the properties of the
planning folder, the actual, estimated and remaining effort fields as
well as the autosumming flag.



----

=item getParentDependency2List()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns dependency list

Since 5.3

=back



Get the dependency list for an artifact where the artifact is the
target artifact. While in 5.3, an artifact can only have a single
parent, that can be changed in future releases. Like
C<getParentDependencyList> but returns the tracker icon of the parent
artifact as well.



----

=item getParentDependencyList()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string


Returns dependency list

Since 4.4

=back



Get the dependency list for an artifact where the artifact is the
target artifact. While in 5.3, an artifact can only have a single
parent, that can be changed in future releases.



----

=item getTracker2Data()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string


Returns Detailed data on the tracker.

Since "5.3"

=back



Returns a data object for a given tracker



----

=item getTracker2List()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns List of trackers within the project.

Since 5.3

=back



Returns a list of trackers for a project in the order that they are
displayed in the UI.



----

=item getTrackerData()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerId             => soapenc:string


Returns Detailed data on the tracker.

Since "4.2"

=back



Returns a data object for a given tracker



----

=item getTrackerList()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns List of trackers within the project.

Since 4.1

=back



Returns a list of trackers for a project in the order they are
displayed in the UI.



----

=item moveArtifact()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string
      targetFolderId        => soapenc:string
      newAssignee           => soapenc:string


Returns New artifact data object

Since 4.2

=back



Moves an artifact to a specified target folder.



----

=item moveArtifact2()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string
      targetFolderId        => soapenc:string
      newAssignee           => soapenc:string


Returns New artifact data object

Since 5.3

=back



Moves an artifact to a specified target folder but unlike
C<moveArtifact>, this method works on C<Artifact2SoapDO>objects.



----

=item moveArtifact3()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactId            => soapenc:string
      targetFolderId        => soapenc:string
      newAssignee           => soapenc:string


Returns New artifact data object

Since 5.4

=back



Moves an artifact to a specified target folder but unlike
C<moveArtifact2>, this method works on C<Artifact3SoapDO>objects.



----

=item removeArtifactDependency()


=over

=item Arguments

      sessionId             => soapenc:string
      originId              => soapenc:string
      targetId              => soapenc:string


Since 4.4

=back



Remove an artifact dependency between two artifacts.



----

=item reorderTrackers()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerIds            => impl:ArrayOf_xsd_string


Since 5.4

=back



Sets a new order of the trackers within a project. The trackers will be
listed in this new order in UI and in the methods that list the
trackers in the SOAP calls.



----

=item setArtifactData()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactData          => tns1:ArtifactSoapDO
      comment               => soapenc:string
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Since 4.1

=back



Sets data associated with the specified artifact.

B<Change History>

I<Version 4.2>

=over

=item * Added additional paramters for an attachment.

=back



----

=item setArtifactData2()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactData          => tns1:Artifact2SoapDO
      comment               => soapenc:string
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Since 5.3

=back



Sets data associated with the specified artifact but unlike
C<setArtifactData>, this method operates on an C<Artifact2SoapDO>.



----

=item setArtifactData3()


=over

=item Arguments

      sessionId             => soapenc:string
      artifactData          => tns1:Artifact3SoapDO
      comment               => soapenc:string
      attachmentFileName    => soapenc:string
      attachmentMimeType    => soapenc:string
      attachmentFileId      => soapenc:string


Since 5.4

=back



Sets data associated with the specified artifact but unlike
C<setArtifactData2>, this method operates on an C<Artifact3SoapDO>.



----

=item setArtifactRank()


=over

=item Arguments

      sessionId             => soapenc:string
      planningFolderId      => soapenc:string
      artfToRankId          => soapenc:string
      artfBeforeId          => soapenc:string
      artfAfterId           => soapenc:string




=back


----

=item setField()


=over

=item Arguments

      sessionId             => soapenc:string
      objectId              => soapenc:string
      fieldData             => tns1:TrackerFieldSoapDO


Since 4.3-HOTFIX1

=back



Sets a custom/flex-field that is associated with a specific folder
(e.g. tracker).



----

=item setField2()


=over

=item Arguments

      sessionId             => soapenc:string
      objectId              => soapenc:string
      fieldData             => tns1:TrackerField2SoapDO


Since 5.3

=back



Sets a custom/flex-field that is associated with a specific folder
(e.g. tracker). This method was introduced to be able to set properties
of the planning folder, the actual, estimated and the remaining effort
field introduced in TeamForge 5.3



----

=item setTracker2Data()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerData           => tns1:Tracker2SoapDO


Since 5.3

=back



Sets data on a specific tracker



----

=item setTrackerData()


=over

=item Arguments

      sessionId             => soapenc:string
      trackerData           => tns1:TrackerSoapDO


Since 4.2

=back



Sets data on a specific tracker



----

=back

=cut

my %methods = (
  getParentDependency2List => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  addDateField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'isRequired', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isDisabled', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isHiddenOnCreate', type => 'xsd:boolean', attr => {}),
    ],
  },
  getArtifactList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
    ],
  },
  getArtifactDetailList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'selectedColumns', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'sortKeys', type => 'impl:ArrayOf_tns1_SoapSortKey', attr => {}),
      SOAP::Data->new(name => 'startIndex', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'maxRows', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'exceptionIfExpiredCache', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'forceNewQuery', type => 'xsd:boolean', attr => {}),
    ],
  },
  setArtifactRank => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artfToRankId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artfBeforeId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artfAfterId', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactList3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
    ],
  },
  getArtifactData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactData2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  createArtifact => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'group', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'category', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'customer', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'priority', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'estimatedHours', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'assignedUsername', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'flexFields', type => 'tns1:SoapFieldValues', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  createTracker2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerTitle', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerDescription', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'icon', type => 'soapenc:string', attr => {}),
    ],
  },
  addSingleSelectField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'isRequired', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isDisabled', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isHiddenOnCreate', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'fieldValues', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'defaultValue', type => 'soapenc:string', attr => {}),
    ],
  },
  getAllowedWorkflowTransitionList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  copyWorkflowTransitions => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'srcTrackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'dstTrackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  getParentDependencyList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  getChildDependencyList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  createTracker => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerTitle', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerDescription', type => 'soapenc:string', attr => {}),
    ],
  },
  findArtifacts2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'searchAttachments', type => 'xsd:boolean', attr => {}),
    ],
  },
  setTracker2Data => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerData', type => 'tns1:Tracker2SoapDO', attr => {}),
    ],
  },
  findArtifacts3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'searchAttachments', type => 'xsd:boolean', attr => {}),
    ],
  },
  moveArtifact => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'newAssignee', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
    ],
  },
  getArtifactData3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  moveArtifact3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'newAssignee', type => 'soapenc:string', attr => {}),
    ],
  },
  getCrossTrackerArtifactList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'selectedColumns', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  addMultiSelectField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'displayLines', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'isRequired', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isDisabled', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isHiddenOnCreate', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'fieldValues', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'defaultValues', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  getTracker2List => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  setField2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldData', type => 'tns1:TrackerField2SoapDO', attr => {}),
    ],
  },
  getChildDependency2List => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  setArtifactData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactData', type => 'tns1:ArtifactSoapDO', attr => {}),
      SOAP::Data->new(name => 'comment', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  moveArtifact2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'newAssignee', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactDetailList3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'selectedColumns', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'sortKeys', type => 'impl:ArrayOf_tns1_SoapSortKey', attr => {}),
      SOAP::Data->new(name => 'startIndex', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'maxRows', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'exceptionIfExpiredCache', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'forceNewQuery', type => 'xsd:boolean', attr => {}),
    ],
  },
  addTextField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'displayColumns', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'displayLines', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'isRequired', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isDisabled', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isHiddenOnCreate', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'defaultValue', type => 'soapenc:string', attr => {}),
    ],
  },
  findArtifacts => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'searchAttachments', type => 'xsd:boolean', attr => {}),
    ],
  },
  getTracker2Data => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  createArtifact3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'group', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'category', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'customer', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'priority', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'estimatedEffort', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'remainingEffort', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'autosumming', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'points', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'assignedUsername', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'flexFields', type => 'tns1:SoapFieldValues', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  setArtifactData2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactData', type => 'tns1:Artifact2SoapDO', attr => {}),
      SOAP::Data->new(name => 'comment', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  deleteArtifact => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactId', type => 'soapenc:string', attr => {}),
    ],
  },
  setArtifactData3 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'artifactData', type => 'tns1:Artifact3SoapDO', attr => {}),
      SOAP::Data->new(name => 'comment', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  reorderTrackers => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerIds', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  getTrackerList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  getFields2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  createArtifactDependency => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'originId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'desc', type => 'soapenc:string', attr => {}),
    ],
  },
  removeArtifactDependency => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'originId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'targetId', type => 'soapenc:string', attr => {}),
    ],
  },
  getFields => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  copyWorkflowTransitions2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'srcTrackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'dstTrackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  addUserSelectField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'displayLines', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'isRequired', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isDisabled', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isHiddenOnCreate', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'defaultValues', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'userFilter', type => 'soapenc:string', attr => {}),
    ],
  },
  getCrossTrackerArtifactList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'containerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'selectedColumns', type => 'impl:ArrayOf_xsd_string', attr => {}),
    ],
  },
  setField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldData', type => 'tns1:TrackerFieldSoapDO', attr => {}),
    ],
  },
  createArtifact2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'group', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'category', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'customer', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'priority', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'estimatedEffort', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'remainingEffort', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'autosumming', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'assignedUsername', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'planningFolderId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'flexFields', type => 'tns1:SoapFieldValues', attr => {}),
      SOAP::Data->new(name => 'attachmentFileName', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentMimeType', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'attachmentFileId', type => 'soapenc:string', attr => {}),
    ],
  },
  setTrackerData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerData', type => 'tns1:TrackerSoapDO', attr => {}),
    ],
  },
  deleteField => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'fieldId', type => 'soapenc:string', attr => {}),
    ],
  },
  getTrackerData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
    ],
  },
  getArtifactDetailList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/TrackerApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'trackerId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'selectedColumns', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'filters', type => 'impl:ArrayOf_tns1_SoapFilter', attr => {}),
      SOAP::Data->new(name => 'sortKeys', type => 'impl:ArrayOf_tns1_SoapSortKey', attr => {}),
      SOAP::Data->new(name => 'startIndex', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'maxRows', type => 'xsd:int', attr => {}),
      SOAP::Data->new(name => 'exceptionIfExpiredCache', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'forceNewQuery', type => 'xsd:boolean', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
