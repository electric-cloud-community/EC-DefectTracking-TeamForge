package TeamForge::CollabNet;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/CollabNet?wsdl [Mon Nov 15 16:37:40 2010]

=head1 NAME

TeamForge::CollabNet - Collabnet TeamForge API

=head1 METHODS

=over 4

=item addGroupMember()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string
      userName              => xsd:string


Since 4.4 SP1

=back



Adds a user to a group. The user and group must be existing already.



----

=item addProjectMember()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      userName              => xsd:string


Since 4.4

=back



Make a user a member of a project.



----

=item createAssociation()


=over

=item Arguments

      sessionId             => xsd:string
      originId              => xsd:string
      targetId              => xsd:string
      description           => xsd:string


Since 4.1

=back



Creates an association between two objects. User must have view
permission on both object and edit permission on at least one of the
two objects.



----

=item createGroup()


=over

=item Arguments

      sessionId             => xsd:string
      fullName              => xsd:string
      description           => xsd:string


Returns Newly created group object.

Since 4.4 SP1

=back



Creates a new group with the specified parameters. NOTE: Only
super-users are allowed to create groups through SOAP interface.



----

=item createOrReplaceProjectTemplate()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      title                 => xsd:string
      description           => xsd:string
      contentChoices        => impl:ArrayOf_xsd_string
      templateId            => xsd:string


Returns The template project data

Since 5.3

=back



Creates or replaces a template from an existing project



----

=item createProject()


=over

=item Arguments

      sessionId             => xsd:string
      name                  => xsd:string
      title                 => xsd:string
      description           => xsd:string


Returns The  project data

Since 4.2-SP1

=back



Creates a project.



----

=item createProjectFromTemplate()


=over

=item Arguments

      sessionId             => xsd:string
      templateId            => xsd:string
      name                  => xsd:string
      title                 => xsd:string
      description           => xsd:string


Returns The  project data

Since 4.2-SP1

=back



Create a project from template.



----

=item createUser()


=over

=item Arguments

      sessionId             => xsd:string
      userName              => xsd:string
      email                 => xsd:string
      fullName              => xsd:string
      locale                => xsd:string
      timeZone              => xsd:string
      isSuperUser           => xsd:boolean
      isRestrictedUser      => xsd:boolean
      password              => xsd:string


Returns Newly created user object.

Since 4.1

=back



Creates a new user with the specified parameters. NOTE: Only
super-users are allowed to create users through SOAP interface.



----

=item createUser2()


=over

=item Arguments

      sessionId             => xsd:string
      userName              => xsd:string
      email                 => xsd:string
      fullName              => xsd:string
      locale                => xsd:string
      timeZone              => xsd:string
      licenseType           => xsd:string
      isSuperUser           => xsd:boolean
      isRestrictedUser      => xsd:boolean
      password              => xsd:string


Returns Newly created user object.

Since 5.4

=back



Creates a new user with the specified parameters. NOTE: Only
super-users are allowed to create users through SOAP interface.



----

=item deleteAssociation()


=over

=item Arguments

      sessionId             => xsd:string
      originId              => xsd:string
      targetId              => xsd:string


Since 4.2

=back



Deletes an association between two objects



----

=item deleteAttachment()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string
      attachmentId          => xsd:string


Since 4.4-SP1

=back



Deletes the specified attachment of the specified object.



----

=item deleteGroup()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string


Since 4.4 SP1

=back



Delete a group.



----

=item deleteProject()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Since 4.3

=back



Delete a project.



----

=item findProjects()


=over

=item Arguments

      sessionId             => xsd:string
      queryString           => xsd:string


Returns List of projects matching search criteria.

Since 4.1

=back



Finds a list of projects matching a search string.



----

=item findUsers()


=over

=item Arguments

      sessionId             => xsd:string
      queryString           => xsd:string


Returns List of users matching search criteria.

Since 4.1

=back



Finds a list of users matching a search string.



----

=item findUsers2()


=over

=item Arguments

      sessionId             => xsd:string
      queryString           => xsd:string


Returns List of users matching search criteria.

Since 5.4

=back



Finds a list of users matching a search string.



----

=item getActiveGroupMembers()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string


Returns List of groups matching a filter.

Since 4.4 SP1

=back



Get all the members of a group



----

=item getActiveGroupMembers2()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string


Returns List of members of a group

Since 5.4

=back



Get all the members of a group



----

=item getApiVersion()


=over

=item Arguments



Returns API version as string.

Since 4.1-HOTFIX2

=back



Get TeamForge API version. This is different from the TeamForge Version
and can be changed independent of that. IMPORTANT: note that the api
version string returned CAN be updated between releases. Therefore it
is very important to perform proper version checking against the
version returned. This is because we may introduce new API calls as
additional features are added to our product. However we guarantee that
subsequent releases will not change existing API signatures or SOAP
structures. The version returned will be a period separated string with
the following format: - The first two fields represent the TeamForge
release version number. For example, "4.3" equates to SourceForge 4.3 -
The third field, if present, will represent service pack version. - The
fourth field, if present, will represent the hot fix version. Example:
4.3 =E<gt> SourceForge 4.3 4.3.0.2 =E<gt> SourceForge 4.3 Hotfix2 4.3.2
=E<gt> SourceForge 4.3 SP2 So a call that existed in 4.3 is guaranteed
to exist in 4.3.2. One in 4.3.0.2 will also work in 4.3.2.



----

=item getAssociationList()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Returns A list of associations for the given object.

Since 4.2

=back



List all of the associations for a given object.



----

=item getAuditHistoryList()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Returns List of changes made to the specified object.

Since 4.1-SP3

=back



Returns the list of changes made to the specified object in reverse
chronological order. The entries returned include all updates to an
object but does not include the object creation itself. NOTE: The
object must be either a task or an artifact. All other object types
result in a IllegalArgumentFault.



----

=item getAuditHistoryList2()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string
      includeDerivedChanges  => xsd:boolean


Returns List of changes made to the specified object.

Since 5.3

=back



Returns the list of changes made to the specified object in reverse
chronological order. The entries returned include all updates to an
object but does not include the object creation itself. The difference
to C<getAuditHistoryList> is that this method will also return changes
on fields introduced in TeamForge 5.3. NOTE: The object must be either
a task or an artifact. All other object types result in a
IllegalArgumentFault.



----

=item getCommentList()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Returns List of comments.

Since 4.2

=back



Gets list of comments for object.



----

=item getConfigurationValue()


=over

=item Arguments

      sessionId             => xsd:string
      keyValue              => xsd:string


Returns The configuration value of the key requested.

Since 4.4-SP1

=back



Get Configuration value for the passed key.



----

=item getCurrentUserData()


=over

=item Arguments

      sessionId             => xsd:string


Returns a UserSoapDO for a given user session id.

Since 5.4

=back



Get the user details for a given user session id.



----

=item getGroupData()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string


Returns Group data.

Since 4.4 SP1

=back



Returns the group information.



----

=item getGroupList()


=over

=item Arguments

      sessionId             => xsd:string
      filter                => tns1:SoapFilter


Returns List of groups matching a filter.

Since 4.4 SP1

=back



Get a list of all groups on the system. At this time, the filter
parameters are ignored. In a future release, the lists will allow the
results to be filtered.



----

=item getGroupList2()


=over

=item Arguments

      sessionId             => xsd:string
      filter                => tns1:SoapFilter


Returns List of groups matching a filter.

Since 5.1

=back



Same as C<getGroupList> but the returned list of groups also includes
the group identifier.



----

=item getJSessionBySoapId()


=over

=item Arguments

      soapId                => xsd:string


Returns String jsession id

Since 5.4

=back



gets the JsessionID using soap Id.



----

=item getJSessionId()


=over

=item Arguments

      oneTimeToken          => xsd:string


Returns User jsession Id.

Since 5.4

=back



returns current user Jsession Id using one time token id



----

=item getProjectAccessLevel()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns The project access level.

Since 4.1-HOTFIX6.1

=back





----

=item getProjectByPath()


=over

=item Arguments

      sessionId             => xsd:string
      projectPath           => xsd:string


Returns a Project2SoapDO for a given project path.

Since 5.4

=back



Get the project data for a given project path.



----

=item getProjectData()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns Project data.

Since 4.1

=back



Returns project data.



----

=item getProjectDiskUsage()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns the file storage disk usage of a project

Since  4.3

=back



Get the filestorage disk utilization of a project specified by a
project id



----

=item getProjectGroupList()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns Groups who have a role in the project.

Since 4.4-SP1

=back



Returns a list of groups that have a role in the project.



----

=item getProjectList()


=over

=item Arguments

      sessionId             => xsd:string


Returns List of projects

Since 4.1

=back



Returns a list of all projects visible to the user. IMPORTANT: In 4.1,
this call returned ONLY projects of which the user is a member of. Use
getUserProjectList() for getting a list of projects in which the user
is a member.



----

=item getProjectListForUser()


=over

=item Arguments

      sessionId             => xsd:string
      userId                => xsd:string


Returns List of user projects.

Since 4.4-SP1

=back



Returns a list of projects the user passed as parameter is a member of
(the list contains only the projects that the soap caller has the right
to see)



----

=item getProjectMemberList()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns Members of project.

Since 4.1

=back



Returns project membership list.



----

=item getProjectQuota()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns The disk quota for the project.

Since 4.3

=back



Get the disk quota for a project.



----

=item getProjectsForUser()


=over

=item Arguments

      sessionId             => xsd:string
      userId                => xsd:string


Returns List of projects.

Since 4.4-SP1

=back



Return a list of projects in which the user is either a project member
or a group member associated with a role in a project.



----

=item getSessionId()


=over

=item Arguments

      oneTimeToken          => xsd:string


Returns User session key.

Since 5.4

=back



returns current user session Id using one time token id



----

=item getUserData()


=over

=item Arguments

      sessionId             => xsd:string
      username              => xsd:string


Returns User data.

Since 4.2

=back



Returns the user information.



----

=item getUserData2()


=over

=item Arguments

      sessionId             => xsd:string
      username              => xsd:string


Returns User data.

Since 5.4

=back



Returns the user information.



----

=item getUserEffectiveMode()


=over

=item Arguments

      sessionId             => xsd:string


Returns effective mode (ALM or SCM) for the current user

Since 5.4

=back



Get effective mode (ALM or SCM) for the current user



----

=item getUserGroupList()


=over

=item Arguments

      sessionId             => xsd:string
      username              => xsd:string


Returns List of groups matching a filter.

Since 4.4 SP1

=back



Get a list of all groups the user belongs. In order to view the list of
groups another user belongs to, the caller must be a site admin.



----

=item getUserList()


=over

=item Arguments

      sessionId             => xsd:string
      filter                => tns1:SoapFilter


Returns List of users matching a filter.

Since 4.3

=back



Get a list of all users on the system. At this time, the filter
parameters are ignored. In a future release, the lists will allow the
results to be filtered.



----

=item getUserList2()


=over

=item Arguments

      sessionId             => xsd:string
      soapFilter            => tns1:SoapFilter


Returns List of users matching a filter.

Since 5.4

=back



Get a list of all users on the system.



----

=item getUserProjectList()


=over

=item Arguments

      sessionId             => xsd:string


Returns List of user projects.

Since 4.1-SP3

=back



Returns a list of projects this user is a member of.



----

=item getVersion()


=over

=item Arguments

      sessionId             => xsd:string


Returns Version as string.

Since 4.1

=back



Get TeamForge version. NOTE: In earlier version of TeamForge, this call
returned a symbolic name for the version. It is now replaced with the
actual version of the product as seen in the "About TeamForge" dialog.



----

=item getVersionInformationList()


=over

=item Arguments

      sessionId             => xsd:string
      folderId              => xsd:string


Returns The version information

Since 4.2

=back



Obtains a list of versions and last modified dates for the objects
residing in the specified folder.



----

=item getWebAndSoapSessionId()


=over

=item Arguments

      oneTimeToken          => xsd:string


Returns a string containing the web and soap session ids separated by &

Since 5.4

=back





----

=item hasGeneralPermission()


=over

=item Arguments

      sessionId             => xsd:string
      username              => xsd:string
      projectId             => xsd:string
      operationString       => xsd:string
      objectId              => xsd:string


Returns Does the user has permission on this resource for this project

Since 5.4

=back



Check if the user has general permission for the resource (specified by
objectid).



----

=item hasPermission()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      operationString       => xsd:string
      objectId              => xsd:string


Returns whether the current user has permission for an operation on a specified object

Since 4.1-HOTFIX2

=back



Check whether the current user has permission for an operation on a
specified object



----

=item invalidateEmailTemplate()


=over

=item Arguments

      templateName          => xsd:string


Since 5.0

=back



Invalidate a Mail template.



----

=item invalidateResourceBundleCache()


=over

=item Arguments

      bundle                => xsd:string


Since 5.0

=back



Invalidate a Message Resource Bundle.



----

=item isHostedMode()


=over

=item Arguments

      sessionId             => xsd:string


Returns true if the appserver is running in Hosted Mode.

Since 4.3

=back



Verify if the TeamForge appserver is running in Hosted Mode.



----

=item keepAlive()


=over

=item Arguments

      sessionId             => xsd:string


Since 4.1

=back



Keeps a session alive. this is a no-op that just validates the session
and updates its last used time.



----

=item listAttachments()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Returns List of attachments, does not include the actual file.

Since 4.4-SP1

=back



Lists the attachments associated with the object, the attachment itself
is not part of the returned object.



----

=item listAttachments2()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Returns List of attachments, does not include the actual file.

Since 5.3

=back



Lists the attachments associated with the object, the attachment itself
is not part of the returned object. The difference to
C<listAttachments> is that this method will return information about
the transactionId and user who created the attachment as well.



----

=item listProjectAdmins()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns Administrators of the project.

Since 5.0

=back



Returns project administrators list.



----

=item listProjectAdmins2()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns Administrators of the project.

Since 5.4

=back



Returns project administrators list.



----

=item listTemplates()


=over

=item Arguments

      sessionId             => xsd:string


Returns The list of template projects

Since 4.2-SP1

=back



List project templates within the installation.



----

=item listUsersWithGeneralPermission()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      operationString       => xsd:string
      objectId              => xsd:string


Returns List of Users who have permission on the given object for the

Since 5.4

=back



Return the list of users who have permission on a particular object for
a given Operation String. The api does not support Default access
permissions.



----

=item login()


=over

=item Arguments

      userName              => xsd:string
      password              => xsd:string


Returns User session key.

Since 4.1

=back



Logs in a user and creates a new session.



----

=item loginAnonymous()


=over

=item Arguments

      anonSharedSecret      => xsd:string


Returns User session key.

Since 4.4

=back



This method allows to login as anonymous to get TF default access. To
make sure this method does not really leave a security hole, a shared
security is used. To use this method, the following property must be
added into sourceforge_configuration.properties
soap.anonymous.shared_secret=aSecret



----

=item loginWithToken()


=over

=item Arguments

      username              => xsd:string
      oneTimeToken          => xsd:string


Returns User session key.

Since 4.2

=back



Logs in a user and creates a new session.



----

=item logoff()


=over

=item Arguments

      userName              => xsd:string
      sessionId             => xsd:string


Since 4.1

=back





----

=item reindexObject()


=over

=item Arguments

      sessionId             => xsd:string
      objectId              => xsd:string


Since 4.1-SP3-HOTFIX9

=back



Re-indexes the contents of the specified project, folder, item or user.
CAUTION: Use this operation sparingly. Indiscriminate use can cause
system overload.



----

=item removeGroupMember()


=over

=item Arguments

      sessionId             => xsd:string
      groupId               => xsd:string
      userName              => xsd:string


Since 4.4 SP1

=back



Remove a user from a group.



----

=item removeProjectMember()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      userName              => xsd:string


Since 4.3 hotfix5

=back



Remove a user from a project.



----

=item setGroupData()


=over

=item Arguments

      sessionId             => xsd:string
      groupData             => tns1:GroupSoapDO




=back



Sets the group information. NOTE: Only super-users are allowed to set
group data.



----

=item setProjectAccessLevel()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      accessLevel           => xsd:int


Since 4.1-HOTFIX6.1

=back



Sets the project access level



----

=item setProjectQuota()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      quota                 => xsd:long


Since 4.3

=back



Get the disk quota for a project.



----

=item setUserData()


=over

=item Arguments

      sessionId             => xsd:string
      userData              => tns1:UserSoapDO


Since 4.3

=back



Sets the user information. NOTE: Only super-users are allowed to set
user data.



----

=item setUserData2()


=over

=item Arguments

      sessionId             => xsd:string
      userData              => tns1:User2SoapDO


Since 5.4

=back



Sets the user information. NOTE: Only super-users are allowed to set
user data.



----

=back

=cut

my %methods = (
  getCurrentUserData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  setProjectAccessLevel => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'accessLevel', type => 'xsd:int', attr => {}),
    ],
  },
  getCommentList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  listUsersWithGeneralPermission => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'operationString', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  deleteGroup => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
    ],
  },
  listAttachments => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectByPath => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectPath', type => 'xsd:string', attr => {}),
    ],
  },
  listAttachments2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  login => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'password', type => 'xsd:string', attr => {}),
    ],
  },
  deleteAssociation => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'originId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'targetId', type => 'xsd:string', attr => {}),
    ],
  },
  keepAlive => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  getJSessionId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'oneTimeToken', type => 'xsd:string', attr => {}),
    ],
  },
  createProject => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'name', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
    ],
  },
  removeProjectMember => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
    ],
  },
  addProjectMember => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
    ],
  },
  setUserData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userData', type => 'tns1:UserSoapDO', attr => {}),
    ],
  },
  getProjectData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  getUserEffectiveMode => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectDiskUsage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  setGroupData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupData', type => 'tns1:GroupSoapDO', attr => {}),
    ],
  },
  invalidateResourceBundleCache => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'bundle', type => 'xsd:string', attr => {}),
    ],
  },
  getJSessionBySoapId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'soapId', type => 'xsd:string', attr => {}),
    ],
  },
  getVersion => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  loginAnonymous => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'anonSharedSecret', type => 'xsd:string', attr => {}),
    ],
  },
  getApiVersion => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
    ],
  },
  getProjectQuota => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  getUserProjectList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  loginWithToken => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'username', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'oneTimeToken', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectAccessLevel => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  getVersionInformationList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'xsd:string', attr => {}),
    ],
  },
  createGroup => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'fullName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
    ],
  },
  getWebAndSoapSessionId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'oneTimeToken', type => 'xsd:string', attr => {}),
    ],
  },
  invalidateEmailTemplate => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'templateName', type => 'xsd:string', attr => {}),
    ],
  },
  getAuditHistoryList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'includeDerivedChanges', type => 'xsd:boolean', attr => {}),
    ],
  },
  getActiveGroupMembers2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
    ],
  },
  setProjectQuota => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'quota', type => 'xsd:long', attr => {}),
    ],
  },
  findUsers2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'xsd:string', attr => {}),
    ],
  },
  getAuditHistoryList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  addGroupMember => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectMemberList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  logoff => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  getUserList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'soapFilter', type => 'tns1:SoapFilter', attr => {}),
    ],
  },
  getGroupList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'filter', type => 'tns1:SoapFilter', attr => {}),
    ],
  },
  getUserGroupList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'xsd:string', attr => {}),
    ],
  },
  findUsers => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'xsd:string', attr => {}),
    ],
  },
  getUserData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'xsd:string', attr => {}),
    ],
  },
  listProjectAdmins2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  findProjects => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'queryString', type => 'xsd:string', attr => {}),
    ],
  },
  createUser2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'email', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'fullName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'locale', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'timeZone', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'licenseType', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'isSuperUser', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isRestrictedUser', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'password', type => 'xsd:string', attr => {}),
    ],
  },
  createProjectFromTemplate => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'templateId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'name', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
    ],
  },
  hasPermission => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'operationString', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  getGroupList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'filter', type => 'tns1:SoapFilter', attr => {}),
    ],
  },
  isHostedMode => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  getSessionId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'oneTimeToken', type => 'xsd:string', attr => {}),
    ],
  },
  getGroupData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
    ],
  },
  getUserData2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectGroupList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  removeGroupMember => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
    ],
  },
  getAssociationList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  reindexObject => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  hasGeneralPermission => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'operationString', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
    ],
  },
  createUser => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'email', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'fullName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'locale', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'timeZone', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'isSuperUser', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'isRestrictedUser', type => 'xsd:boolean', attr => {}),
      SOAP::Data->new(name => 'password', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  createOrReplaceProjectTemplate => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'contentChoices', type => 'impl:ArrayOf_xsd_string', attr => {}),
      SOAP::Data->new(name => 'templateId', type => 'xsd:string', attr => {}),
    ],
  },
  getActiveGroupMembers => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'xsd:string', attr => {}),
    ],
  },
  deleteAttachment => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'objectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'attachmentId', type => 'xsd:string', attr => {}),
    ],
  },
  getUserList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'filter', type => 'tns1:SoapFilter', attr => {}),
    ],
  },
  listTemplates => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
    ],
  },
  getConfigurationValue => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'keyValue', type => 'xsd:string', attr => {}),
    ],
  },
  setUserData2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userData', type => 'tns1:User2SoapDO', attr => {}),
    ],
  },
  getProjectsForUser => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userId', type => 'xsd:string', attr => {}),
    ],
  },
  getProjectListForUser => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'userId', type => 'xsd:string', attr => {}),
    ],
  },
  deleteProject => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  listProjectAdmins => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  createAssociation => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CollabNet',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'originId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'targetId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
