package TeamForge::CategorizationApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/CategorizationApp?wsdl [Mon Nov 15 16:37:37 2010]

=head1 NAME

TeamForge::CategorizationApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item addProjectToCategory()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      categoryId            => soapenc:string


Since "4.3-SP1"

=back



Add a given project to a category.



----

=item createCategory()


=over

=item Arguments

      sessionId             => soapenc:string
      parentId              => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string


Returns A category data object representing the newly created category

=back



Create a category



----

=item deleteCategory()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryId            => soapenc:string


Since "4.3-SP1"

=back



Deletes an category.



----

=item getAllCategories()


=over

=item Arguments

      sessionId             => soapenc:string


Returns List of categories within the project.

Since "4.3-SP1"

=back



Returns a list of all categories.



----

=item getCategoryData()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryId            => soapenc:string


Returns Detailed data on the category.

Since "4.3-SP1"

=back



Returns a data object for a given category



----

=item getCategoryProjects()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryId            => soapenc:string
      includeSubcategories  => xsd:boolean


Returns List of projects that are in the category

Since "4.3-SP1"

=back



Get list of projects in the specified category and, if requested,
subcategories



----

=item getProjectCategories()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns List of categories the project is in

Since "4.3-SP1"

=back



Returns a list of categories the project belongs to



----

=item getRootCategoryData()


=over

=item Arguments

      sessionId             => soapenc:string


Returns Detailed data on the root category.

Since "4.3-SP1"

=back



Returns a data object for the root category



----

=item getSubcategories()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryId            => soapenc:string
      recursive             => xsd:boolean


Returns List of categories in the root category.

Since "4.3-SP1"

=back



Returns a list of subcategories to the specified category.



----

=item getUncategorizedProjects()


=over

=item Arguments

      sessionId             => soapenc:string


Returns List of projects that are in the category

Since "4.3-SP1"

=back



Get list of projects that have not been categorized



----

=item isCategorizationEnabled()


=over

=item Arguments

      sessionId             => soapenc:string


Returns true/false

Since 4.3-SP1

=back



Provides SOAP services for managing project categories.

B<Change History>

I<Version 4.4>: No changes.

Check if categorization support is enabled site-wide.



----

=item moveCategory()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryId            => soapenc:string
      dstCategoryId         => soapenc:string


Since "4.3-SP1"

=back



Move a Category including all subcategories under different parent.
Fails completely if not everything can be moved.



----

=item removeProjectFromCategory()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      categoryId            => soapenc:string


Since "4.3-SP1"

=back



Remove a given project from a category.



----

=item setCategoryData()


=over

=item Arguments

      sessionId             => soapenc:string
      categoryData          => tns1:CategorySoapDO


Since "4.3-SP1"

=back



Sets data on a specific category



----

=back

=cut

my %methods = (
  getAllCategories => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
    ],
  },
  getCategoryProjects => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'includeSubcategories', type => 'xsd:boolean', attr => {}),
    ],
  },
  isCategorizationEnabled => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
    ],
  },
  deleteCategory => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
    ],
  },
  createCategory => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'parentId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
    ],
  },
  moveCategory => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'dstCategoryId', type => 'soapenc:string', attr => {}),
    ],
  },
  getProjectCategories => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  getSubcategories => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'recursive', type => 'xsd:boolean', attr => {}),
    ],
  },
  setCategoryData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryData', type => 'tns1:CategorySoapDO', attr => {}),
    ],
  },
  getUncategorizedProjects => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
    ],
  },
  getCategoryData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
    ],
  },
  removeProjectFromCategory => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
    ],
  },
  addProjectToCategory => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'categoryId', type => 'soapenc:string', attr => {}),
    ],
  },
  getRootCategoryData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/CategorizationApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
