package TeamForge::RbacApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/RbacApp?wsdl [Mon Nov 15 16:37:49 2010]

=head1 NAME

TeamForge::RbacApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item addCluster()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      operationCluster      => soapenc:string
      folderId              => soapenc:string


Since 4.4

=back



Add an operation cluster to a role, expanding the permission set that
the role grants access to.



----

=item addGroup()


=over

=item Arguments

      sessionId             => soapenc:string
      groupId               => soapenc:string
      roleId                => soapenc:string
      projectId             => soapenc:string


Since 4.4-SP1

=back



Add a group to a role, within the project scope.



----

=item addUser()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      username              => soapenc:string


Since 4.1-HOTFIX4

=back



Add a user to the role, giving them all of the permissions of that role



----

=item createRole()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      title                 => soapenc:string
      description           => soapenc:string


Returns The RoleSoapDO that was created

Since 4.1-HOTFIX4

=back



Create a role in a given project



----

=item deleteRole()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string


Since 4.4

=back



Delete a role.



----

=item getGroupRoleList()


=over

=item Arguments

      sessionId             => soapenc:string
      groupId               => soapenc:string
      projectId             => soapenc:string


Returns List of roles the group is associated with.

Since 4.4-SP1

=back



Returns a list of roles the group is associated with in a project.



----

=item getIntegratedAppPermissionsForProject()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      linkId                => soapenc:string


Since 5.4

=back



Returns integratedApp permissions associated with a project.



----

=item getProjectsByIntegratedAppPermission()


=over

=item Arguments

      sessionId             => soapenc:string
      perm                  => soapenc:string
      integratedAppName     => soapenc:string


Since 5.4

=back



Returns the list of projects by integratedApp permission.



----

=item getRoleGroupList()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string


Returns List of groups associated with a role.

Since 4.4-SP1

=back



Returns a list of groups that belong to the specified role.



----

=item getRoleGroupUsers()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      roleId                => soapenc:string


Returns List of users in the specified role.

Since 4.4-SP1

=back



Return a list of users who are part of a group and associated with the
specified role.



----

=item getRoleGroupUsers2()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      roleId                => soapenc:string


Returns List of users in the specified role.

Since 5.4

=back



Return a list of users who are part of a group and associated with the
specified role.



----

=item getRoleList()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns The RoleSoapList describing all roles in the project

Since 4.3

=back



Get a list of Roles in a project context. This call requires project
admin permissions.



----

=item getRoleMemberList()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string


Returns List of users in the specified role.

Since 4.3-SP1

=back



Returns a list of users that are in a specified role.



----

=item getRoleMemberList2()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string


Returns List of users in the specified role.

Since 5.4

=back



Returns a list of users that are in a specified role.



----

=item getUserRoleList()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string
      username              => soapenc:string


Returns List of roles that a user is a member of.

Since 4.3-SP1

=back



Returns a list of roles that a user is a member of in the specified
project. In order to view the list of roles another user belongs to,
the caller must be a project admin.



----

=item listClusters()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string


Returns list of clusters for a role

Since 4.4

=back



Get the list of operation cluster assigned to a role.



----

=item listGroupRolesByProject()


=over

=item Arguments

      sessionId             => soapenc:string
      projectId             => soapenc:string


Returns list of groups and the roles it is associated with

Since 4.4-SP1

=back



Returns a list of groups and the roles it is associated with in a
project.



----

=item listRolePaths()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      repositoryId          => soapenc:string


Since 5.2

=back



Get the list of paths for a role.



----

=item removeCluster()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      operationCluster      => soapenc:string
      folderId              => soapenc:string


Since 4.4

=back



Remove an operation cluster to a role, removing the permission set.



----

=item removeGroup()


=over

=item Arguments

      sessionId             => soapenc:string
      groupId               => soapenc:string
      roleId                => soapenc:string
      projectId             => soapenc:string


Since 4.4-SP1

=back



Removes the group for the role, within the project scope



----

=item removeUser()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      username              => soapenc:string


Since 4.3-HOTFIX1

=back



Remove a user from a role



----

=item setRolePaths()


=over

=item Arguments

      sessionId             => soapenc:string
      roleId                => soapenc:string
      repositoryId          => soapenc:string
      rolePaths             => tns1:SoapNamedValues


Since 5.2

=back



Set the list of paths for a role.



----

=back

=cut

my %methods = (
  getRoleGroupList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  getGroupRoleList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  getRoleList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  addGroup => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  addUser => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'soapenc:string', attr => {}),
    ],
  },
  removeUser => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'soapenc:string', attr => {}),
    ],
  },
  getRoleGroupUsers2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  removeCluster => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'operationCluster', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
    ],
  },
  getProjectsByIntegratedAppPermission => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'perm', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'integratedAppName', type => 'soapenc:string', attr => {}),
    ],
  },
  createRole => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'soapenc:string', attr => {}),
    ],
  },
  getRoleMemberList2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  addCluster => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'operationCluster', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'folderId', type => 'soapenc:string', attr => {}),
    ],
  },
  setRolePaths => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'repositoryId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'rolePaths', type => 'tns1:SoapNamedValues', attr => {}),
    ],
  },
  listClusters => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  deleteRole => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  getIntegratedAppPermissionsForProject => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'linkId', type => 'soapenc:string', attr => {}),
    ],
  },
  getRoleGroupUsers => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  listGroupRolesByProject => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  getRoleMemberList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
    ],
  },
  getUserRoleList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'username', type => 'soapenc:string', attr => {}),
    ],
  },
  removeGroup => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'groupId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'soapenc:string', attr => {}),
    ],
  },
  listRolePaths => {
    endpoint => 'http://localhost:8080/ce-soap50/services/RbacApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'roleId', type => 'soapenc:string', attr => {}),
      SOAP::Data->new(name => 'repositoryId', type => 'soapenc:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
