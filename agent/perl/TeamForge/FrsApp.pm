package TeamForge::FrsApp;

# Modifed by Dan Speers of Collabnet for the perlsdk kit for TeamForge
# -- generated by SOAP::Lite (v0.712) for Perl -- soaplite.com -- Copyright (C) 2000-2001 Paul Kulchenko --
# -- generated from https://forge.collab.net/ce-soap50/services/FrsApp?wsdl [Mon Nov 15 16:37:43 2010]

=head1 NAME

TeamForge::FrsApp - Collabnet TeamForge API

=head1 METHODS

=over 4

=item createFrsFile()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string
      fileName              => xsd:string
      mimeType              => xsd:string
      fileId                => xsd:string


Returns Newly created frs file object.

Since 4.1

=back



Creates a new FRS file and adds it to the specified release.



----

=item createPackage()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string
      title                 => xsd:string
      description           => xsd:string
      isPublished           => xsd:boolean


Returns Newly created package object.

Since 4.1

=back



Provides SOAP services for managing the file release system.

B<Change History>

I<Version 5.4>

=over

=item * Added I<getArtifactListReportedInRelease2> to support the story
points field

=item * Added I<getArtifactListResolvedInRelease2> to support the story
points field

=back

I<Version 5.3>

=over

=item * I<getArtifactListReportedInRelease>: New operation added in 5.3

=item * I<getArtifactListResolvedInRelease>: New operation added in 5.3

=back

I<Version 4.4>

=over

=item * I<PackageSoapDO>: Added new methods getIsPublished and
setIsPublished

=item * I<createPackage>: Added new parameter to call in 4.4

=item * I<createPackage2>: Removed in 4.4. Use createPackage instead

=item * I<isPackagePublished>: Removed in 4.4. Use getPackageData and
call PackageSoapDO.getIsPublished() instead

=item * I<setPackagePublished>: Removed in 4.4. Use
PackageSoapDO.setIsPublished() and setPackageData instead

=item * I<getReleaseDownloadCount>: Removed in 4.4. Use getReleaseData
and call ReleaseSoapDO.getDownloaded() instead

=item * I<getPackageDownloadCount>: Removed in 4.4. Use getPackageData
and call PackageSoapDO.getDownloaded() instead

=back

Creates a new FRS package. Requires
OperationConstants.FRSAPPFOLDER_CREATE_CREATEPACKAGE

B<Change History>

I<Version 4.4>

=over

=item * Added additional parameter C<isPublished>

=back



----

=item createRelease()


=over

=item Arguments

      sessionId             => xsd:string
      packageId             => xsd:string
      title                 => xsd:string
      description           => xsd:string
      status                => xsd:string
      maturity              => xsd:string


Returns Newly created release object.

Since 4.1

=back



Creates a new release within a specified package.



----

=item deleteFrsFile()


=over

=item Arguments

      sessionId             => xsd:string
      frsFileId             => xsd:string


Since 4.1

=back



Deletes the specified file.



----

=item deletePackage()


=over

=item Arguments

      sessionId             => xsd:string
      packageId             => xsd:string


Since 4.1

=back



Deletes the specified package.



----

=item deleteRelease()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Since 4.1

=back



Deletes the specified release.



----

=item getArtifactListReportedInRelease()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns List of the artifacts reported in the given release.

Since 5.3

=back



List artifacts that were found in the given release



----

=item getArtifactListReportedInRelease2()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns List of the artifacts reported in the given release.

Since 5.4

=back



List artifacts that were found in the given release. The difference
between this method and getArtifactListReportedInRelease is that this
returns C<Artifact3SoapList> that adds the points information on the
artifact



----

=item getArtifactListResolvedInRelease()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns List of the artifacts resolved in the given release.

Since 5.3

=back



List artifacts that were resolved in the given release



----

=item getArtifactListResolvedInRelease2()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns List of the artifacts resolved in the given release.

Since 5.4

=back



List artifacts that were resolved in the given release. The difference
between this method and getArtifactListResolvedInRelease is that this
returns C<Artifact3SoapList> that adds the points information on the
artifact



----

=item getFrsFileData()


=over

=item Arguments

      sessionId             => xsd:string
      frsFileId             => xsd:string


Returns the FRS file data.

Since 4.2

=back



Gets FRS file data.



----

=item getFrsFileId()


=over

=item Arguments

      sessionId             => xsd:string
      frsFileId             => xsd:string


Returns File storage id (for download using FileStorageService or SimpleFileStorageService).

Since 4.1

=back



Returns a temporary file storage object id to download an FRS file. The
returned file storage id should be used with one of the file storage
services to download the file (e.g. FileStorageApp or
SimpleFileStorageApp service).

I<IMPORTANTI<: The returned file id is valid ONLY during the session.
>>



----

=item getFrsFileList()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns List of files within the specified release.

Since 4.1

=back



Returns a list of files within a release.



----

=item getPackageData()


=over

=item Arguments

      sessionId             => xsd:string
      packageId             => xsd:string


Returns Package object data.

Since 4.1

=back



Returns package data.



----

=item getPackageList()


=over

=item Arguments

      sessionId             => xsd:string
      projectId             => xsd:string


Returns List of packages within the specified project.

Since 4.1

=back



Lists packages within a project.



----

=item getReleaseData()


=over

=item Arguments

      sessionId             => xsd:string
      releaseId             => xsd:string


Returns Release data.

Since 4.1

=back



Returns the specified release deata.



----

=item getReleaseList()


=over

=item Arguments

      sessionId             => xsd:string
      packageId             => xsd:string


Returns List of releases within the specified package.

Since 4.1

=back



Lists the releases within a specified package.



----

=item setPackageData()


=over

=item Arguments

      sessionId             => xsd:string
      packageData           => tns1:PackageSoapDO


Since 4.1

=back



Returns package data. Requires OperationConstants.PACKAGE_EDIT_EDIT



----

=item setReleaseData()


=over

=item Arguments

      sessionId             => xsd:string
      releaseData           => tns1:ReleaseSoapDO


Since 4.1

=back



Sets the specified release deata.



----

=back

=cut

my %methods = (
  getReleaseData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  createFrsFile => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'fileName', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'mimeType', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'fileId', type => 'xsd:string', attr => {}),
    ],
  },
  getPackageData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'packageId', type => 'xsd:string', attr => {}),
    ],
  },
  getArtifactListReportedInRelease => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  getFrsFileList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  deletePackage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'packageId', type => 'xsd:string', attr => {}),
    ],
  },
  createPackage => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'isPublished', type => 'xsd:boolean', attr => {}),
    ],
  },
  getArtifactListResolvedInRelease => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  getArtifactListResolvedInRelease2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  getFrsFileData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'frsFileId', type => 'xsd:string', attr => {}),
    ],
  },
  deleteFrsFile => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'frsFileId', type => 'xsd:string', attr => {}),
    ],
  },
  getReleaseList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'packageId', type => 'xsd:string', attr => {}),
    ],
  },
  setPackageData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'packageData', type => 'tns1:PackageSoapDO', attr => {}),
    ],
  },
  getArtifactListReportedInRelease2 => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  setReleaseData => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseData', type => 'tns1:ReleaseSoapDO', attr => {}),
    ],
  },
  getPackageList => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'projectId', type => 'xsd:string', attr => {}),
    ],
  },
  getFrsFileId => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'frsFileId', type => 'xsd:string', attr => {}),
    ],
  },
  deleteRelease => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'releaseId', type => 'xsd:string', attr => {}),
    ],
  },
  createRelease => {
    endpoint => 'http://localhost:8080/ce-soap50/services/FrsApp',
    soapaction => '',
    uri => '',
    parameters => [
      SOAP::Data->new(name => 'sessionId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'packageId', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'title', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'description', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'status', type => 'xsd:string', attr => {}),
      SOAP::Data->new(name => 'maturity', type => 'xsd:string', attr => {}),
    ],
  },
);

use SOAP::Lite;
use Exporter;
use Carp ();
use URI;

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

no strict 'refs';
for my $method (@EXPORT_OK) {
  my %method = %{$methods{$method}};
  *$method = sub {
    my $self = UNIVERSAL::isa($_[0] => __PACKAGE__) 
      ? ref $_[0] ? shift # OBJECT
                  # CLASS, either get self or create new and assign to self
                  : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
      # function call, either get self or create new and assign to self
      : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
    my $endpoint;
    eval {
    	$endpoint = $self->transport->endpoint;
    };
    if ( $endpoint ) {
    	$endpoint = host($method{endpoint},$endpoint);
    } else {
    	$endpoint = $method{endpoint};
    }

    my @templates = @{$method{parameters}};
    my @args;
    for ( my $ct = 0; $ct <= $#_; $ct++ ) {
	my $val  = $_[$ct];
	my $type = $templates[$ct]->type;

	if ( ref($val) && ref($val) ne 'HASH' && ref($val) ne 'ARRAY' ) {
	    $val->prepare()                           if ( $type =~ /^tns1:.*SoapDO$/ );
	    $val = $val->simpleHash                   if ( $type eq 'tns1:SoapFilter' );
	    $val = $val->prepare                      if ( $type eq 'impl:ArrayOf_tns1_SoapFilter' );
	} else {
	    $val = SOAP::Utils::encode_data( $val )   if ( $type =~ /^(xsd|soapenc):string$/ );
	}

	push @args, $templates[$ct]->value( $val );

    }
    $self->proxy($endpoint || Carp::croak "No server address (proxy) specified") unless $self->proxy;
    my $som = $self
      -> endpoint($endpoint)
      -> uri($method{uri})
      -> readable(1)
      -> on_action(sub{qq!"$method{soapaction}"!})
      -> call(SOAP::Data->name('namesp2:'.$method)->attr({'xmlns:namesp2' => 'http://schema.vasoftware.com/sf/soap/service',
							  'xmlns:tns1' => 'http://schema.vasoftware.com/sf/soap/type'}) => 
	      @args);
	      #map {@templates ? shift(@templates)->value($_) : $_} @_); 

    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result 
                                        : $som;
  }
}

sub AUTOLOAD {
  my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
  return if $method eq 'DESTROY';

  die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

sub host {
	my $target = new URI shift;   # This is where the WSDL wants to go.
	my $proxy  = new URI shift;	  # This is where the object was instanciated to go.
	
	$proxy->path( $target->path );
	
	return $proxy->as_string;
	
}

sub describe {

    my $self   = shift;
    my $method = shift;

    if ( exists( $methods{ $method } )) {
	return $methods{ $method }->{ parameters };
    }
    return undef;

}

sub methods {
    my $self = shift;
    return \%methods;
}

1;
